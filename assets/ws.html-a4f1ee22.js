import{_ as t,p as c,q as p,s as e,R as n,t as a,Z as o,n as r}from"./framework-1749bed7.js";const d={},l=o(`<h2 id="websocket-实现聊天" tabindex="-1"><a class="header-anchor" href="#websocket-实现聊天" aria-hidden="true">#</a> WebSocket 实现聊天</h2><p>端口: 80 443</p><ul><li><p>创建 WebSocket 连接 -&gt; <code>new WebSocket(url)</code></p></li><li><p>常量 <code>CONNECTING -&gt; 0</code>、<code>OPEN -&gt; 1</code>、<code>CLOSING -&gt; 2</code>、<code>CLOSED -&gt; 3</code></p></li><li><p><code>WebSocket.onopen</code> -&gt; 连接成功，开始通讯</p></li><li><p><code>WebSocket.onmessage</code> -&gt; 客户端接收服务端发送的消息</p></li><li><p><code>WebSocket.onclose</code> -&gt; 连接关闭后的回调函数</p></li><li><p><code>WebSocket.onerror</code> -&gt; 连接失败后的回调函数</p></li><li><p><code>WebSocket.readyState</code> -&gt; 当前的连接状态</p></li><li><p><code>WebSocket.close</code> -&gt; 关闭当前连接</p></li><li><p><code>WebSocket.send</code> -&gt; 客户端向服务端发送消息</p></li></ul><p>当刷新浏览器或关闭浏览器时，应断开与服务端的连接。</p><p>若浏览器与服务器断开连接，则进行重连，我们每 5s 重连一次，重连一定次数依旧不能成功，则断开连接。连接成功后将 limit 限制重置。</p><p>心跳检测是客户端与服务端约定一个规则进行通讯，如若在一定时间内收不到对方的消息，则连接断开，需进行重连。由于各浏览器机制不同，触发 onclose 时机也不同，故我们需要心跳检测来补充断线重连的逻辑。</p><p>🦅 WebSocket 并不是全新协议，而是利用 HTTP 协议来建立连接，故此连接需从浏览器发起，格式如下：</p><div class="language-http line-numbers-mode" data-ext="http"><pre class="language-http"><code>GET wss://api.chat.deeruby.com/ HTTP/1.1
<span class="token header"><span class="token header-name keyword">Host</span><span class="token punctuation">:</span> <span class="token header-value">api.chat.deeruby.com</span></span>
<span class="token header"><span class="token header-name keyword">Connection</span><span class="token punctuation">:</span> <span class="token header-value">Upgrade</span></span>
<span class="token header"><span class="token header-name keyword">Upgrade</span><span class="token punctuation">:</span> <span class="token header-value">websocket</span></span>
<span class="token header"><span class="token header-name keyword">Origin</span><span class="token punctuation">:</span> <span class="token header-value">https://chat.deeruby.com</span></span>
<span class="token header"><span class="token header-name keyword">Sec-WebSocket-Version</span><span class="token punctuation">:</span> <span class="token header-value">13</span></span>
<span class="token header"><span class="token header-name keyword">Sec-WebSocket-Key</span><span class="token punctuation">:</span> <span class="token header-value">dsRxU8oSxU2Jru9hOgf4dg==</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><p>请求头<code>Upgrade: websocket</code>和<code>Connection: Upgrade</code>表示这个连接将要被转换为 <strong>WebSocket</strong> 连接。</p></li><li><p><code>Sec-WebSocket-Version</code>指定了 <strong>WebSocket</strong> 的协议版本，如果服务端不支持该版本，需要返回一个<code>Sec-WebSocket-Version</code>header，里面包含服务端支持的版本号。</p></li><li><p><code>Sec-WebSocket-Key</code>与服务端<code>Sec-WebSocket-Accept</code>配套，用于标识连接。</p></li></ul><p>🦅 随后，服务器若接受该请求，则做如下反应：</p><div class="language-http line-numbers-mode" data-ext="http"><pre class="language-http"><code><span class="token response-status"><span class="token http-version property">HTTP/1.1</span> <span class="token status-code number">101</span> <span class="token reason-phrase string">Switching Protocols </span></span>
<span class="token header"><span class="token header-name keyword">Connection</span><span class="token punctuation">:</span> <span class="token header-value">upgrade </span></span>
<span class="token header"><span class="token header-name keyword">Upgrade</span><span class="token punctuation">:</span> <span class="token header-value">websocket </span></span>
<span class="token header"><span class="token header-name keyword">Sec-WebSocket-Accept</span><span class="token punctuation">:</span> <span class="token header-value">aAO8QyaRJEYUX2yG+pTEwRQK04w=</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>响应码 <strong>101</strong> 表示本次连接的 <strong>HTTP</strong> 协议将被更改，更改为 <code>Upgrade: websocket</code> 指定的 <strong>WebSocket</strong> 协议。</li><li><code>Sec-WebSocket-Accep</code> 是将 <code>Sec-WebSocket-Key</code> 跟 <code>258EAFA5-E914-47DA-95CA-C5AB0DC85B11</code> 拼接，通过 <strong>SHA1</strong> 计算并转换为 <strong>base64</strong> 字符串。浏览器使用它来确保响应与请求相对应。</li></ul><p><strong>WS中有HTTP的参与，需要先通过HTTP请求访问对方是否支持WebSocket</strong></p><blockquote><p><strong>无法模拟 WebSocket 握手</strong></p><p>我们不能使用 <code>XMLHttpRequest</code> 或 <code>fetch</code> 来进行这种 HTTP 请求，因为不允许 JavaScript 设置这些 header。</p></blockquote>`,14),i={id:"扩展和子协议",tabindex:"-1"},u=e("a",{class:"header-anchor",href:"#扩展和子协议","aria-hidden":"true"},"#",-1),k={href:"https://zh.javascript.info/websocket#kuo-zhan-he-zi-xie-yi",target:"_blank",rel:"noopener noreferrer"},h=e("p",null,[n("WebSocket 可能还有其他 header，"),e("code",null,"Sec-WebSocket-Extensions"),n(" 和 "),e("code",null,"Sec-WebSocket-Protocol"),n("，它们描述了扩展和子协议。")],-1),b=e("p",null,"例如：",-1),g=e("li",null,[e("p",null,[e("code",null,"Sec-WebSocket-Extensions: deflate-frame"),n(" 表示浏览器支持数据压缩。扩展与传输数据有关，扩展了 WebSocket 协议的功能。"),e("code",null,"Sec-WebSocket-Extensions"),n(" header 由浏览器自动发送，其中包含其支持的所有扩展的列表。")])],-1),S=e("code",null,"Sec-WebSocket-Protocol: soap, wamp",-1),v={href:"https://en.wikipedia.org/wiki/SOAP",target:"_blank",rel:"noopener noreferrer"},m={href:"https://www.iana.org/assignments/websocket/websocket.xml",target:"_blank",rel:"noopener noreferrer"},_=o(`<p>这个可选的 header 是使用 <code>new WebSocket</code> 的第二个参数设置的。它是子协议数组，例如，如果我们想使用 SOAP 或 WAMP：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">let</span> socket <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">WebSocket</span><span class="token punctuation">(</span><span class="token string">&quot;wss://javascript.info/chat&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">&quot;soap&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;wamp&quot;</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div>`,2),f={id:"数据传输",tabindex:"-1"},W=e("a",{class:"header-anchor",href:"#数据传输","aria-hidden":"true"},"#",-1),w={href:"https://zh.javascript.info/websocket#shu-ju-chuan-shu",target:"_blank",rel:"noopener noreferrer"},y=o("<p>WebSocket 通信由 “frames”（即数据片段）组成，可以从任何一方发送，并且有以下几种类型：</p><ul><li>“text frames” —— 包含各方发送给彼此的文本数据。</li><li>“binary data frames” —— 包含各方发送给彼此的二进制数据。</li><li>“ping/pong frames” 被用于检查从服务器发送的连接，浏览器会自动响应它们。</li><li>还有 “connection close frame” 以及其他服务 frames。</li></ul><p>在浏览器里，我们仅直接使用文本或二进制 frames。</p><p><strong>WebSocket <code>.send()</code> 方法可以发送文本或二进制数据。</strong></p><p><code>socket.send(body)</code> 调用允许 <code>body</code> 是字符串或二进制格式，包括 <code>Blob</code>，<code>ArrayBuffer</code> 等。不需要额外的设置：直接发送它们就可以了。</p><p><strong>当我们收到数据时，文本总是以字符串形式呈现。而对于二进制数据，我们可以在 <code>Blob</code> 和 <code>ArrayBuffer</code> 格式之间进行选择。</strong></p><p>它是由 <code>socket.binaryType</code> 属性设置的，默认为 <code>&quot;blob&quot;</code>，因此二进制数据通常以 <code>Blob</code> 对象呈现。</p>",7),x={href:"https://zh.javascript.info/blob",target:"_blank",rel:"noopener noreferrer"},T=e("code",null,"<a>",-1),P=e("code",null,"<img>",-1),A=e("code",null,"Blob",-1),E=e("code",null,'"arraybuffer"',-1),q={id:"限速",tabindex:"-1"},C=e("a",{class:"header-anchor",href:"#限速","aria-hidden":"true"},"#",-1),j={href:"https://zh.javascript.info/websocket#xian-su",target:"_blank",rel:"noopener noreferrer"},B=o(`<p>想象一下：我们的应用程序正在生成大量要发送的数据。但是用户的网速却很慢，可能是在乡下的移动设备上。</p><p>我们可以反复地调用 <code>socket.send(data)</code>。但是数据将会缓冲（储存）在内存中，并且只能在网速允许的情况下尽快将数据发送出去。</p><p><code>socket.bufferedAmount</code> 属性储存了目前已缓冲的字节数，等待通过网络发送。</p><p>我们可以检查它以查看 socket 是否真的可用于传输。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 每 100ms 检查一次 socket</span>
<span class="token comment">// 仅当所有现有的数据都已被发送出去时，再发送更多数据</span>
<span class="token function">setInterval</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>socket<span class="token punctuation">.</span>bufferedAmount <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    socket<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token function">moreData</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>注意，WebSocket和socket没什么联系！</strong></p><blockquote><p>Socket套接字，是由<strong>系统</strong>提供用于网络通信的技术，是基于TCP/IP协议的网络通信的基本操作单元。基于Socket套接字的网络程序开发就是网络编程。</p><p>socket是在应用层和传输层之间的一个抽象层，它把TCP/IP层复杂的操作抽象为几个简单的接口供应用层调用来实现进程在网络中通信。</p></blockquote><h2 id="浅谈sse" tabindex="-1"><a class="header-anchor" href="#浅谈sse" aria-hidden="true">#</a> 浅谈SSE</h2><h3 id="什么是sse" tabindex="-1"><a class="header-anchor" href="#什么是sse" aria-hidden="true">#</a> 什么是SSE ?</h3><p><strong>SSE 全称：Server-Sent Events</strong></p><p><strong>SSE</strong> 使用 <strong>HTTP</strong>协议，而 <strong>HTTP</strong> 协议无法由服务器主动推送消息，但有一种变通方式，即服务端向客户端声明，接下来发送的为流信息。其为一个连续发送的数据流，而不是一个一次性的数据包，故客户端不会关闭连接，而是一直等服务器发送新的数据流。<strong>SSE</strong> 就是通过这种机制，使用流信息向浏览器推送消息。</p><h3 id="什么场景选用sse" tabindex="-1"><a class="header-anchor" href="#什么场景选用sse" aria-hidden="true">#</a> 什么场景选用SSE ?</h3><p>只需要服务器给客户端发送消息的场景时，SSE可胜任</p>`,13);function H(N,O){const s=r("ExternalLinkIcon");return c(),p("div",null,[l,e("h3",i,[u,n(),e("a",k,[n("扩展和子协议"),a(s)])]),h,b,e("ul",null,[g,e("li",null,[e("p",null,[S,n(" 表示我们不仅要传输任何数据，还要传输 "),e("a",v,[n("SOAP"),a(s)]),n(" 或 WAMP（“The WebSocket Application Messaging Protocol”）协议中的数据。WebSocket 子协议已经在 "),e("a",m,[n("IANA catalogue"),a(s)]),n(" 中注册。因此，此 header 描述了我们将要使用的数据格式。")]),_])]),e("h2",f,[W,n(),e("a",w,[n("数据传输"),a(s)])]),y,e("p",null,[e("a",x,[n("Blob"),a(s)]),n(" 是高级的二进制对象，它直接与 "),T,n("，"),P,n(" 及其他标签集成在一起，因此，默认以 "),A,n(" 格式是一个明智的选择。但是对于二进制处理，要访问单个数据字节，我们可以将其改为 "),E,n("：")]),e("h2",q,[C,n(),e("a",j,[n("限速"),a(s)])]),B])}const I=t(d,[["render",H],["__file","ws.html.vue"]]);export{I as default};
