import{_ as n,p as e,q as i,Z as a}from"./framework-1749bed7.js";const s="/guyu.inn/assets/youhua-b8a923f7.webp",l={},t=a('<p><img src="'+s+`" alt=""></p><h2 id="性能优化" tabindex="-1"><a class="header-anchor" href="#性能优化" aria-hidden="true">#</a> 性能优化</h2><p>所以前端的性能优化，就可以从一个经典问题 浏览器输入URL后发生什么 入手，从每一个步骤去思考优化的可能</p><ol><li>网络传输阶段</li></ol><p>这个阶段可以：</p><ul><li><p>DNS优化: 预解析</p><p>DNS预解析 -- 使用 meta 标签</p><p><code>&lt;meta http-equiv=&quot;x-dns-prefetch-control&quot; content=&quot;on&quot; /&gt;</code></p><p>DNS预解析 -- 使用 link 标签</p><p><code>&lt;link rel=&quot;dns-prefetch&quot; href=&quot;https://www.baidu.com&quot; /&gt;</code></p><p>当浏览器访问一个域名的时候，需要解析一次DNS，获得对应域名的ip地址。</p><p>浏览器缓存 =&gt; 系统缓存 =&gt; 路由器缓存 =&gt;ISP(运营商)DNS缓存 =&gt; 根域名服务器 =&gt; 顶级域名服务器 =&gt; 主域名服务器的顺序逐步读取缓存，直到拿到IP地址</p><p>作用：根据浏览器定义的规则，提前解析之后可能会用到的域名，使解析结果缓存到系统缓存中，缩短DNS解析时间，来提高网站的访问速度</p></li><li><p>HTTP优化</p><ul><li>使用HTTP缓存（强缓存/协商缓存/service worker缓存离线资源）</li><li>减少HTTP请求 <ul><li>合并CSS和JavaScript文件。</li><li>使用CSS Sprites将多个小图标合并成一张大图。</li><li>尽量使用字体图标（如Font Awesome）代替图片。</li></ul></li><li>优化资源加载 <ul><li>压缩CSS、JavaScript和HTML文件，减少文件大小。</li><li>优化图片大小，使用WebP、JPEG 2000等现代图像格式。</li><li>使用懒加载（Lazy Loading）技术，仅在需要时加载图片和其他资源。</li><li>使用预加载，预加载是一种优化策略，可以提前加载关键资源，以便在用户需要时立即可用。</li></ul></li><li>优化网络传输： <ul><li>使用CDN（内容分发网络）加速静态资源的加载。</li><li>开启HTTP压缩（如Gzip）以减少传输数据大小。</li><li>使用HTTP/2或HTTP/3协议以获得更高的传输性能。</li></ul></li><li>使用SSR</li></ul></li></ul><p>这里还要考虑一点，在网络传输的过程中是不是可以理解为数据体积越小速度越快？那其实打包工具的优化也可以放在这。</p><ul><li>减少打包体积？ <ol><li>按需加载，路由/类库</li><li>Scope Hoisting 会分析出模块之间的依赖关系，尽可能的把打包出来的模块合并到一个函数中去。</li><li>Tree Shaking 可以实现删除项目中未被引用的代码</li></ol></li></ul><ol start="2"><li>渲染页面阶段</li></ol><p>这里其实就是更多的设计到一些代码层面的优化了，比如</p><ul><li><p>使用Web性能API：</p><ul><li>利用<code>requestAnimationFrame</code>进行动画操作，而不是<code>setTimeout</code>或<code>setInterval</code>。</li><li>使用<code>window.performance</code> API监控页面性能。</li><li>减少回流（reflow）和重绘（repaint）：避免频繁修改样式，尽量在修改样式之前将元素设<code>display: none</code>，完成修改后再显示</li></ul></li><li><p>使用按需加载（路由，组件，静态资源），代码分割</p></li><li><p>虚拟列表</p></li><li><p>web worker处理长任务</p></li><li><p>js的async和defer，一些link标签的preload,prefetch属性</p></li></ul><p>什么是代码分割？</p><p>代码分割是指，将脚本中无需立即调用的代码在代码构建时转变为异步加载的过程。</p><p>在 Webpack 构建时，会避免加载已声明要异步加载的代码，异步代码会被单独分离出一个文件，当代码实际调用时被加载至页面。</p><h3 id="react性能优化" tabindex="-1"><a class="header-anchor" href="#react性能优化" aria-hidden="true">#</a> React性能优化</h3><ol><li><p>避免不必要的重新渲染：</p><ul><li>使用<code>React.memo</code>包装函数式组件，仅在props改变时重新渲染。</li><li>在类组件中，使用<code>shouldComponentUpdate</code>或继承<code>React.PureComponent</code>来避免不必要的重新渲染。</li></ul></li><li><p>使用虚拟化列表：</p><ul><li>对于大型列表或表格，使用虚拟化（如<code>react-window</code>库）仅渲染可见部分，以提高性能。</li></ul></li><li><p>优化事件处理器：</p><ul><li>使用事件委托（Event Delegation）减少事件监听器。</li><li>使用防抖（Debounce）和节流（Throttle）技术避免频繁触发事件处理器。</li></ul></li><li><p>代码分割和按需加载：</p><ul><li>使用<code>React.lazy</code>和<code>React.Suspense</code>实现组件的懒加载和按需加载。</li><li>使用Webpack等构建工具进行代码分割。</li></ul></li><li><p>使用<code>React.Fragment</code>避免额外的DOM元素：</p><ul><li>使用<code>React.Fragment</code>组合多个子元素，以避免创建不必要的DOM节点。</li></ul></li><li><p>优化React Context：</p><ul><li>使用多个独立的Context来避免不必要的组件重新渲染。</li><li>将Context Provider放在组件树的合适位置，以减少作用范围。</li></ul></li><li><p>使用<code>useCallback</code>和<code>useMemo</code>避免不必要的计算和渲染：</p><ul><li>使用<code>useCallback</code>保存事件处理器和回调函数的引用，避免不必要的重新创建。</li><li>使用<code>useMemo</code>缓存计算结果，避免不必要的重新计算。</li></ul></li><li><p>优化CSS-in-JS：</p><ul><li>避免在组件内部创建大量CSS规则，尽量将样式提取到外部。</li><li>使用<code>classnames</code>库或其他方法避免不必要的样式计算。</li></ul></li><li><p>服务器端渲染（SSR）：</p><ul><li>使用服务器端渲染（如Next.js）加快首屏渲染速度，提高SEO。</li></ul></li><li><p>监控性能：</p></li></ol><ul><li>使用React DevTools和Performance API监控React应用程序的性能。</li><li>使用<code>React.Profiler</code>组件收集组件渲染性能数据。</li></ul><h2 id="如何极致的优化动画性能" tabindex="-1"><a class="header-anchor" href="#如何极致的优化动画性能" aria-hidden="true">#</a> 如何极致的优化动画性能</h2><ol><li>使用CSS动画：CSS动画借助GPU加速，在大多数情况下具有更好的性能。使用transform和opacity属性，避免使用top、left等属性进行动画操作。</li><li>使用requestAnimationFrame：requestAnimationFrame是浏览器提供的优化动画的方法，可以更好地与浏览器的渲染机制同步。</li><li>减少重绘和回流：通过合并多个DOM修改、使用transform进行动画变换，避免频繁的DOM重绘和回流操作，以提高性能。</li><li>使用硬件加速：使用CSS属性translate3d、scale3d等可以启用GPU硬件加速，提高动画的性能。</li><li>避免使用阻塞操作：确保动画执行期间没有长时间的JavaScript计算或网络请求阻塞主线程。</li></ol><h2 id="cdn" tabindex="-1"><a class="header-anchor" href="#cdn" aria-hidden="true">#</a> CDN</h2><p>CDN (全称 Content Delivery Network)，即内容分发网络</p><p>构建在现有网络基础之上的智能虚拟网络，依靠部署在各地的边缘服务器，通过中心平台的负载均衡、内容分发、调度等功能模块，使用户就近获取所需内容，降低网络拥塞，提高用户访问响应速度和命中率。<code>CDN</code> 的关键技术主要有内容存储和分发技术</p><p>简单来讲，<code>CDN</code>就是根据用户位置分配最近的资源</p><p>于是，用户在上网的时候不用直接访问源站，而是访问离他“最近的”一个 CDN 节点，术语叫<strong>边缘节点</strong>，其实就是缓存了源站内容的代理服务器。如下图：</p><h2 id="虚拟列表" tabindex="-1"><a class="header-anchor" href="#虚拟列表" aria-hidden="true">#</a> 虚拟列表</h2><p>和懒加载的区别</p><ul><li><p>懒加载主要是用于优化网络请求的，就是只加载可视部分的资源</p></li><li><p>虚拟列表是优化渲染的，只渲染可视部分的列表Item，而实际上所有的列表信息是已经加载好了，只不过没渲染罢了、</p></li><li><p>懒加载的计算方式 <strong>img.offsetTop (图片距离document顶部的高度)&lt; window.innerHeight(浏览器可视区域高度) + document.body.scrollTop(浏览器滚动过的距离);</strong> 然后使用HTML5中自定义属性的方式 ，写一个自定义属性data-src，然后等到该加载高度时再把data-src赋值给src就行</p></li><li><p>虚拟列表的计算方式:</p><p>虚拟列表的实现，实际上就是在首屏加载的时候，只加载<code>可视区域</code>内需要的列表项，当滚动发生时，动态通过计算获得<code>可视区域</code>内的列表项，并将<code>非可视区域</code>内存在的列表项删除。</p><ul><li>计算当前<code>可视区域</code>起始数据索引(<code>startIndex</code>)</li><li>计算当前<code>可视区域</code>结束数据索引(<code>endIndex</code>)</li><li>计算当前<code>可视区域的</code>数据，并渲染到页面中</li><li>计算<code>startIndex</code>对应的数据在整个列表中的偏移位置<code>startOffset</code>并设置到列表上</li></ul><ol><li><p>假定<code>可视区域</code>高度固定，称之为<code>screenHeight</code></p></li><li><p>假定<code>列表每项</code>高度固定，称之为<code>itemSize</code></p></li><li><p>假定<code>列表数据</code>称之为<code>listData</code></p></li><li><p>假定<code>当前滚动距离</code>称之为<code>scrollTop</code></p><p>则可以推断出</p><p>列表总高度<code>listHeight</code> = listData.length * itemSize</p><p>可显示的列表项数<code>visibleCount</code> = Math.ceil(screenHeight / itemSize)</p><p>数据的起始索引<code>startIndex</code> = Math.floor(scrollTop / itemSize)</p><p>数据的结束索引<code>endIndex</code> = startIndex + visibleCount</p><p>列表显示数据为<code>visibleData</code> = listData.slice(startIndex,endIndex)</p><p>偏移量<code>startOffset</code> = scrollTop - (scrollTop % itemSize);</p></li></ol></li></ul><p>布局方案：就用相对定位和绝对定位</p><p>注意⚠️: 那如果 渲染Item中的高度是动态的，也就是说ItemSize可变，又该如何计算呢。</p><p>我们可以先设定一个预估高度渲染，然后获取真实高度再缓存</p><p>高速白屏的优化： 在可视区的上方和下方设定一个缓冲区</p><p>其他优化方案: 使用 <code>IntersectionObserver</code> 监听事件 可以只监听可视区域的变化，使用 <code>ResizeObserver</code>监听内容区域宽高变</p><h2 id="首页白屏优化" tabindex="-1"><a class="header-anchor" href="#首页白屏优化" aria-hidden="true">#</a> 首页白屏优化</h2><p>白屏时间即是，浏览器开始显示内容的时间，所以我们一般认为解析完<code>&lt;head&gt;</code>的时刻，或者开始渲染<code>&lt;body&gt;</code>标签就是该页面白屏结束的时间。</p><p>白屏时间: window.performance.timing.domLoading - window.performance.timing.navigationStart</p><p>首屏时间是指用户打开一个网站时，直到浏览器首页面内容渲染完成的时间。</p><p>首屏时间: window.performance.timing.domInteractive - window.performace.timing.navigationStart</p><ol><li>DNS预解析 DNS预解析 -- 使用 meta 标签 <code>&lt;meta http-equiv=&quot;x-dns-prefetch-control&quot; content=&quot;on&quot; /&gt;</code> DNS预解析 -- 使用 link 标签 <code>&lt;link rel=&quot;dns-prefetch&quot; href=&quot;https://www.baidu.com&quot; /&gt;</code> 当浏览器访问一个域名的时候，需要解析一次DNS，获得对应域名的ip地址。 浏览器缓存 =&gt; 系统缓存 =&gt; 路由器缓存 =&gt;ISP(运营商)DNS缓存 =&gt; 根域名服务器 =&gt; 顶级域名服务器 =&gt; 主域名服务器的顺序 逐步读取缓存，直到拿到IP地址</li></ol><p>作用：根据浏览器定义的规则，提前解析之后可能会用到的域名，使解析结果缓存到系统缓存中，缩短DNS解析时间，来提高网站的访问速度</p><ol start="2"><li><p>路由，组件，图片等懒加载</p></li><li><p>合理是有tree shanking 减少代码体积</p></li><li><p>虚拟列表</p></li><li><p>web worker优化长任务</p></li><li><p>js的async和defer，一些link标签的preload,prefetch属性</p></li></ol><p>preload: 用于提前加载一些需要的依赖，这些资源会优先加载 preload 特点：</p><p>1）preload 加载的资源是在浏览器渲染机制之前进行处理的，并且不会阻塞 onload 事件；</p><p>2）preload 加载的 JS 脚本其加载和执行的过程是分离的，即 preload 会预加载相应的脚本代码，待到需要时自行调用</p><p>prefetch 是利用浏览器的空闲时间，加载页面将来可能用到的资源的一种机制；通常可以用于加载其他页面（非首页）所需要的资源，以便加快后续页面的打开速度</p><p>prefetch 特点：</p><p>1）pretch 加载的资源可以获取非当前页面所需要的资源，并且将其放入缓存至少5分钟（无论资源是否可以缓存）</p><p>2）当页面跳转时，未完成的 prefetch 请求不会被中断</p><ol start="7"><li>ssr服务端渲染</li></ol><p>客户端渲染：获取 HTML 文件，根据需要下载 JavaScript 文件并运行，生成 DOM，然后再渲染。</p><p>服务端渲染：服务端返回 HTML 文件，客户端只需解析 HTML。</p><p>优点：首屏渲染快，对搜索引擎优化（SEO）好。</p><p>缺点：配置麻烦，增加了服务器的计算压力。</p><p><strong>性能优化目前只是在自己的浏览器看，和用户机型实际的性能肯定有参差，那如何获取用户侧的性能指标呢？</strong></p><p>用URM工具，或者在代码里面埋入<code>window.performace</code>和 <code>window.navigator</code></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// window.performace</span>
<span class="token comment">// 提供了与浏览器性能相关的信息和指标。它允许开发者获取与页面加载、资源加载、导航和计时相关的性能数据</span>
<span class="token number">1.</span> window<span class="token punctuation">.</span>performance<span class="token punctuation">.</span>timing：这是一个包含了与页面加载相关的时间戳的对象。它提供了以下属性：

   navigationStart：浏览器开始导航的时间戳。
   unloadEventStart：前一个页面 unload 事件触发的时间戳。
   unloadEventEnd：前一个页面 unload 事件完成的时间戳。
   redirectStart：重定向开始的时间戳。
   redirectEnd：重定向完成的时间戳。
   fetchStart：浏览器开始获取页面资源的时间戳。
   domainLookupStart：域名查询开始的时间戳。
   domainLookupEnd：域名查询完成的时间戳。
   connectStart：与服务器建立连接开始的时间戳。
   connectEnd：与服务器建立连接完成的时间戳。
   secureConnectionStart：安全连接开始的时间戳。
   requestStart：浏览器向服务器发送请求的时间戳。
   responseStart：接收到第一个字节的时间戳。
   responseEnd：接收到最后一个字节的时间戳。
   domLoading：开始解析 <span class="token constant">DOM</span> 的时间戳。
   domInteractive：<span class="token constant">DOM</span> 解析完成、文档准备就绪的时间戳。
   domContentLoadedEventStart：DOMContentLoaded 事件触发的时间戳。
   domContentLoadedEventEnd：DOMContentLoaded 事件完成的时间戳。
   domComplete：<span class="token constant">DOM</span> 解析完成的时间戳。
   loadEventStart：load 事件触发的时间戳。
   loadEventEnd：load 事件完成的时间戳。
   
<span class="token number">2.</span> window<span class="token punctuation">.</span>performance<span class="token punctuation">.</span>navigation：这是一个包含有关页面导航的信息的对象。它提供了以下属性：

   type：导航类型，如 <span class="token number">0</span> 表示同步导航，<span class="token number">1</span> 表示重定向导航，<span class="token number">2</span> 表示后退或前进导航。
   redirectCount：重定向次数。

<span class="token number">3.</span> window<span class="token punctuation">.</span>performance<span class="token punctuation">.</span>memory：这是一个包含与内存使用情况相关的信息的对象。它提供了以下属性：

   jsHeapSizeLimit：JavaScript 堆内存的大小限制。
   totalJSHeapSize：JavaScript 堆内存的当前使用量。
   usedJSHeapSize：已经分配给 JavaScript 对象的堆内存。

<span class="token number">4.</span> window<span class="token punctuation">.</span>performance<span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span>：这是一个方法，返回从页面加载开始到调用该方法时经过的毫秒数。它可以用于测量代码执行的时间。
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// window.navigator </span>
<span class="token comment">// 是一个提供有关浏览器环境和用户设备的对象。它包含了许多属性和方法，可以用于获取有关浏览器、操作系统和设备的信息。</span>

window<span class="token punctuation">.</span>navigator<span class="token punctuation">.</span>userAgent：表示浏览器的用户代理字符串，其中包含了关于用户设备和浏览器的信息。通过解析该字符串，可以获取浏览器类型、版本、操作系统等信息。用正则解析

window<span class="token punctuation">.</span>navigator<span class="token punctuation">.</span>platform：表示用户设备的操作系统平台信息，例如 <span class="token string">&quot;Win32&quot;</span>、<span class="token string">&quot;MacIntel&quot;</span> 等。

window<span class="token punctuation">.</span>navigator<span class="token punctuation">.</span>language：表示用户设备的首选语言，通常是基于浏览器设置或操作系统语言。

window<span class="token punctuation">.</span>navigator<span class="token punctuation">.</span>appVersion：表示浏览器的版本信息。

window<span class="token punctuation">.</span>navigator<span class="token punctuation">.</span>cookieEnabled：表示浏览器是否启用了 Cookie。

window<span class="token punctuation">.</span>navigator<span class="token punctuation">.</span>onLine：表示浏览器是否处于联网状态。

window<span class="token punctuation">.</span>navigator<span class="token punctuation">.</span>geolocation：表示浏览器是否支持地理位置信息获取。

window<span class="token punctuation">.</span>navigator<span class="token punctuation">.</span>plugins：表示浏览器安装的插件列表。

window<span class="token punctuation">.</span>navigator<span class="token punctuation">.</span>mimeTypes：表示浏览器支持的 <span class="token constant">MIME</span> 类型列表。

window<span class="token punctuation">.</span>navigator<span class="token punctuation">.</span><span class="token function">getBattery</span><span class="token punctuation">(</span><span class="token punctuation">)</span>：获取用户设备的电池信息。

window<span class="token punctuation">.</span>navigator<span class="token punctuation">.</span><span class="token function">vibrate</span><span class="token punctuation">(</span><span class="token punctuation">)</span>：控制设备进行振动。

window<span class="token punctuation">.</span>navigator<span class="token punctuation">.</span><span class="token function">requestMIDIAccess</span><span class="token punctuation">(</span><span class="token punctuation">)</span>：请求访问 <span class="token constant">MIDI</span> 设备。
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,56),o=[t];function c(p,d){return e(),i("div",null,o)}const u=n(l,[["render",c],["__file","optimization.html.vue"]]);export{u as default};
