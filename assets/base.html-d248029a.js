import{_ as e,p as a,q as r,Z as t}from"./framework-1749bed7.js";const n={},s=t('<h3 id="什么是哈希表" tabindex="-1"><a class="header-anchor" href="#什么是哈希表" aria-hidden="true">#</a> 什么是哈希表？</h3><p><strong>哈希表（Hash table，也叫散列表），是根据关键码值(Key value)而直接进行访问的数据结构</strong>也就是说，它通过把关键码值映射到表中一个位置来访问记录，以加快查找的速度。这个映射函数叫做散列函数，存放记录的数组叫做散列表。</p><p>（可以理解为通过哈希函数把key转化为数组下标 然后直接根据这个下标取值）</p><h4 id="哈希碰撞" tabindex="-1"><a class="header-anchor" href="#哈希碰撞" aria-hidden="true">#</a> 哈希碰撞</h4><p>多组数据的存储下表相同</p><h4 id="如何解决" tabindex="-1"><a class="header-anchor" href="#如何解决" aria-hidden="true">#</a> 如何解决？</h4><p>常用的解决方案有散列法和拉链法。散列法又分为开放寻址法和再散列法等，此处不做展开。java中使用的实现为拉链法，即：在每个冲突处构建链表，将所有冲突值链入链表，如同拉链一般一个元素扣一个元素，故名拉链法（数组链表）。</p><p>需要注意的是，如果遭到恶意哈希碰撞攻击，拉链法会导致哈希表退化为链表，即所有元素都被存储在同一个节点的链表中，此时哈希表的查找速度=链表遍历查找速度=O(n)。</p>',8),h=[s];function c(d,i){return a(),r("div",null,h)}const _=e(n,[["render",c],["__file","base.html.vue"]]);export{_ as default};
