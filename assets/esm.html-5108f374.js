import{_ as o,p,q as t,s as n,R as s,t as e,Z as c,n as i}from"./framework-1749bed7.js";const l={},u=n("p",null,"参考链接",-1),r={href:"https://www.bookstack.cn/read/es6-3rd/docs-module.md",target:"_blank",rel:"noopener noreferrer"},d={href:"https://juejin.cn/post/6844904067651600391",target:"_blank",rel:"noopener noreferrer"},m={href:"https://juejin.cn/post/6994224541312483336",target:"_blank",rel:"noopener noreferrer"},k=c(`<h3 id="es-moudle-和common-js区别" tabindex="-1"><a class="header-anchor" href="#es-moudle-和common-js区别" aria-hidden="true">#</a> ES Moudle 和Common JS区别</h3><p>如果没怎么写过node的话，Common Js 可能就没怎么接触过，这里就先简单介绍一下Common Js的用法。</p><p>我们先明白如下概念</p><blockquote><p>Node中每个模块都有一个module对象， module对象中的有一个exports属性为一个接口对象， 我们需要把模块之间公共的方法或属性挂载在这个接口对象中， 方便其他的模块使用这些公共的方法或属性。</p><p>Node中每个模块的最后， 都会return: module.exports。</p><p>Node中每个模块都会把module.exports指向的对象赋值给一个变量exports， 也就是说： exports = module.exports。</p><p>module.exports = XXX， 表示当前模块导出一个单一成员， 结果就是XXX。</p></blockquote><p>直接看代码</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// m1.js</span>
<span class="token keyword">let</span> m1 <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token keyword">let</span> m2 <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>

exports<span class="token punctuation">.</span>m1 <span class="token operator">=</span> m1<span class="token punctuation">;</span>
exports<span class="token punctuation">.</span>m2 <span class="token operator">=</span> m2<span class="token punctuation">;</span>

<span class="token comment">// index.js</span>
<span class="token keyword">const</span> m <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;./m1.js&#39;</span><span class="token punctuation">)</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>m<span class="token punctuation">)</span>  <span class="token comment">// {m1: 0, m2: 1}</span>

<span class="token comment">// 如果不想导出一个对象 就想导出一个值呢？</span>

<span class="token comment">// m2.js</span>
<span class="token keyword">let</span> m1 <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
module<span class="token punctuation">.</span>exports <span class="token operator">=</span> m1<span class="token punctuation">;</span>

<span class="token comment">// index.js</span>
<span class="token keyword">const</span> m <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;./m2.js&#39;</span><span class="token punctuation">)</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>m<span class="token punctuation">)</span>  <span class="token comment">// 0</span>


<span class="token literal-property property">思考</span><span class="token operator">:</span> 如果在 m2<span class="token punctuation">.</span>js 中写 exports <span class="token operator">=</span> m1， 那么index<span class="token punctuation">.</span>js的log输出是什么

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>是{} 所以 我们知道 <strong>使用module.exports可以给导出对象整个赋值，而exports只能给单个属性赋值</strong>，所以就是刚刚提到的，exports其实是对module.exports的引用，我们require的是module.exports的值，而给exports直接赋值的话就切断了他们的引用关系。</p><p>那么 对于CommonJs， 我们是不是可以这么理解:</p><blockquote><p>m1.js, m2.js都是一个函数，我们通过require这个签名调用他们，exports就是他们的返回值。</p></blockquote><p>这么理解的话，下面Common Js的一些运行机制就容易理解了</p><ul><li>CommonJS模块输出的是一个值的浅拷贝，ES6 模块输出的是值的引用；</li><li>CommonJS 模块是运行时加载，ES6 模块是编译时输出接口。</li><li>CommonJs输出的值会被缓存，也就是每个模块都只会被执行一次（这一点同import），这也是为什么会是浅拷贝的原因</li></ul><p>我们先不看后半部分，还没讲到。</p><p>先看第一点，CommonJS模块输出的是一个值的拷贝，换句话说就是，一旦输出了某个值，如果模块内部后续的变化，影响不了外部对这个值的使用。具体例子：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// m3.js</span>
<span class="token keyword">let</span> counter <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span>
<span class="token keyword">function</span> <span class="token function">incCounter</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  counter<span class="token operator">++</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">counter</span><span class="token operator">:</span> counter<span class="token punctuation">,</span>
  <span class="token literal-property property">incCounter</span><span class="token operator">:</span> incCounter<span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token comment">// index.js</span>
<span class="token keyword">let</span> mod <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;./m3&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>mod<span class="token punctuation">.</span>counter<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 3</span>
mod<span class="token punctuation">.</span><span class="token function">incCounter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>mod<span class="token punctuation">.</span>counter<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 3</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这样看可能难理解，那我们用刚刚说的，我们使用函数的思维来理解</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">let</span> count <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span>
<span class="token keyword">function</span> <span class="token function">incCounter</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  count<span class="token operator">++</span>
<span class="token punctuation">}</span>

<span class="token keyword">function</span> <span class="token function">Myrequire</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token punctuation">{</span>
    count<span class="token punctuation">,</span>
    incCounter
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">let</span> mod <span class="token operator">=</span> <span class="token function">Myrequire</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>mod<span class="token punctuation">.</span>count<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 3</span>
mod<span class="token punctuation">.</span><span class="token function">incCounter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>mod<span class="token punctuation">.</span>count<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 3</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>第二点运行时加载，这个直接看代码就懂了</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// m.js</span>
<span class="token keyword">let</span> m <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
module<span class="token punctuation">.</span>exports <span class="token operator">=</span> m

<span class="token comment">// index.js</span>
<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">3</span><span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">let</span> m 
  <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> m <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;./3&#39;</span><span class="token punctuation">)</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>m<span class="token punctuation">)</span>
<span class="token punctuation">}</span>
<span class="token comment">// undefined 0 undefined</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>简单的提下ESM，export导出值，但import的name要和export一致，所以可以用export default，import的时候可以重命名</p><p>import的值如果是简单变量，重新赋值会报错，因为是只读的，如果是引入一个对象的话就是可以改变这个对象的成员变量，因为import是对这个值的引用。</p><p>然后 import() 动态加载，可以达到和require差不多的效果。 不过require是同步的（这也是不在浏览器环境中使用commonJS的原因，同步就代表代码需要加载完整个模块才能继续执行），import()是异步的。i<wbr>mport.meta 获取一些源信息，比如env啊，URL啊之类的，Vi te等还提供了glod这样的批量导入的功能。</p><p><strong>注意⚠️： ESM中，在一个模块中对导出的变量进行修改，都会影响到其他模块中对同一变量的对引用（cj会影响到，因为直接是浅拷贝），ESM会将模块导出的值包裹在一个只读的代理对象中，这个代理对象每次被导入都会被重新创建，从而确保每个模块都有自己的导出值</strong></p><p>就是，ESM中，模块的导入和导出是静态的，有利于词法分析，但在加载和执行是动态的。</p><p>导入导出关系在编译时静态确定，运行到导入模块语句时再动态加载执行</p><h3 id="循环依赖" tabindex="-1"><a class="header-anchor" href="#循环依赖" aria-hidden="true">#</a> 循环依赖</h3><p>就是a加载了b而b又加载了a，二者的处理方式不同，所以结果会不同</p><p>commonJs之前说过，同步+加载时执行（require还会缓存，比如require了a和b，然后a中也require也require了b，那b其实只会执行1次），所以是<strong>输出的是当前已经执行那部分的值，而不是代码全部执行后的值</strong>，所以可能会导致导出的值不是一个完整的对象。</p><p>ESM会先创建一个未完成的模块对象，将其缓存，然后所有的模块都执行完成后再回到初始模块完成构建，确保导出的值时完整的，</p><h3 id="总结" tabindex="-1"><a class="header-anchor" href="#总结" aria-hidden="true">#</a> 总结</h3><ul><li><p>因为<strong>CommonJS</strong>的<code>require</code>语法是同步的，所以就导致了<strong>CommonJS</strong>模块规范只适合用在服务端，而ES6模块无论是在浏览器端还是服务端都是可以使用的，但是在服务端中，还需要遵循一些特殊的规则才能使用 ；</p></li><li><p><strong>CommonJS</strong> 模块输出的是一个值的拷贝，而ES6 模块输出的是值的引用；</p></li><li><p><strong>CommonJS</strong> 模块是运行时加载，而ES6 模块是编译时输出接口，使得对JS的模块进行静态分析成为了可能；也实现了Tree Shanking这种优化技术。</p></li><li><p>因为两个模块加载机制的不同，所以在对待循环加载的时候，它们会有不同的表现。<strong>CommonJS</strong>遇到循环依赖的时候，只会输出已经执行的部分，后续的输出或者变化，是不会影响已经输出的变量。而ES6模块相反，使用<code>import</code>加载一个变量，变量不会被缓存，真正取值的时候就能取到最终的值；</p></li><li><p>关于模块顶层的<code>this</code>指向问题，在<strong>CommonJS</strong>顶层，<code>this</code>指向当前模块；而在ES6模块中，<code>this</code>指向<code>undefined</code>；但二者的作用域都是独立私有的，实现方式不同，CommonJs是在运行时被包装在一个函数中，就像我们刚刚提到的那样。</p></li><li><p>关于两个模块互相引用的问题，在ES6模块当中，是支持加载<strong>CommonJS</strong>模块的。但是反过来，<strong>CommonJS</strong>并不能<code>require</code>ES6模块，在NodeJS中，两种模块方案是分开处理的。</p></li></ul>`,30);function v(b,g){const a=i("ExternalLinkIcon");return p(),t("div",null,[u,n("ul",null,[n("li",null,[n("a",r,[s("阮一峰Module"),e(a)]),s("、"),n("a",d,[s("二者区别"),e(a)]),s("、"),n("a",m,[s("进阶"),e(a)])])]),k])}const x=o(l,[["render",v],["__file","esm.html.vue"]]);export{x as default};
