import{_ as p,p as o,q as c,s as n,R as e,t,Z as s,n as l}from"./framework-1749bed7.js";const i={},r=s('<h3 id="泛型" tabindex="-1"><a class="header-anchor" href="#泛型" aria-hidden="true">#</a> 泛型</h3><p>平时我们都是对值进行编程，泛型是对类型进行编程</p><p>指在定义函数、接口或类的时候，不预先指定具体的类型，而在使用的时候再指定类型的一种特性。 使用<code>&lt;T&gt;</code>代表类型的变量，T只是约定用法，可以任意指定。</p><ul><li>泛型是指在定义函数、接口或类的时候，不预先指定具体的类型，使用时再去指定类型的一种特性。</li><li>可以把泛型理解为代表类型的参数</li></ul><h3 id="ts中的数据类型" tabindex="-1"><a class="header-anchor" href="#ts中的数据类型" aria-hidden="true">#</a> Ts中的数据类型</h3><p><code>typescript</code> 的数据类型主要有如下：（12个）</p><ul><li>boolean（布尔类型）</li><li>number（数字类型）</li><li>string（字符串类型）</li><li>array（数组类型）</li><li>tuple（元组类型）</li><li>enum（枚举类型）</li><li>any（任意类型）</li><li>null 和 undefined 类型</li><li>void 类型</li><li>never 类型</li><li>object 对象类型</li><li>unknown 类型</li></ul><ul><li>void与never更多的是运用于函数返回的限制，如果这个函数不会返回任何东西（undefined算东西），没有返回的机会（比如一直在执行），或者扔（throw）不是return一个错误出去，那么应该用never，即表示这个函数绝对不（never）返回。</li><li>任何类型都能分配给 <code>unknown</code>，但 <code>unknown</code> 不能分配给其他基本类型</li></ul><h3 id="谈谈ts中的枚举" tabindex="-1"><a class="header-anchor" href="#谈谈ts中的枚举" aria-hidden="true">#</a> 谈谈Ts中的枚举</h3><p>枚举是一个被命名的整型常数的集合，用于声明一组命名的常数,当一个变量有几种可能的取值时,可以将它定义为枚举类型</p><p>通俗来说，枚举就是一个对象的所有可能取值的集合</p><p>在日常生活中也很常见，例如表示星期的SUNDAY、MONDAY、TUESDAY、WEDNESDAY、THURSDAY、FRIDAY、SATURDAY就可以看成是一个枚举</p>',12),k={href:"https://vue3js.cn/interview/typescript/enum.html#%E4%BA%8C%E3%80%81%E4%BD%BF%E7%94%A8",target:"_blank",rel:"noopener noreferrer"},u=s(`<h3 id="谈谈interface" tabindex="-1"><a class="header-anchor" href="#谈谈interface" aria-hidden="true">#</a> 谈谈interface</h3><p><strong>接口</strong>是一系列抽象方法的声明，是一些方法特征的集合，这些方法都应该是抽象的，需要由具体的<strong>类</strong>去实现，然后第三方就可以通过这组抽象方法调用，让具体的类执行具体的方法</p><p>简单来讲，一个接口所描述的是一个对象相关的属性和方法，但并不提供具体创建此对象实例的方法</p><p><code>typescript</code>的核心功能之一就是对类型做检测，虽然这种检测方式是“鸭式辨型法”，而接口的作用就是为为这些类型命名和为你的代码或第三方代码定义一个约定</p><h4 id="interface-和-type的区别" tabindex="-1"><a class="header-anchor" href="#interface-和-type的区别" aria-hidden="true">#</a> interface 和 type的区别</h4><ol><li>interface和type，一个是接口一个是类型别名， 所以本质上来说他们一个用于规范类和对象的数据类型，一个给我们的自定义类型取一个名字</li><li>二者可以互相继承，但是联合类型和基础类型不可被interface继承也不可被class实现，可以被type继承</li><li>type不能合并声明，就是说如果我有两个type a会报错，interface不会报错也不是覆盖，是合并</li></ol><h4 id="interface-和-抽象类" tabindex="-1"><a class="header-anchor" href="#interface-和-抽象类" aria-hidden="true">#</a> interface 和 抽象类</h4><ol><li>抽象类里面可以有方法的实现，但是接口完全都是抽象的，不存在方法的实现；</li><li>子类只能继承一个抽象类，而接口可以被多个实现；</li><li>抽象方法可以是public，protected，但是接口只能是public，默认的；</li><li>抽象类可以有构造器，而接口不能有构造器；</li></ol><h3 id="ts中的高级类型" tabindex="-1"><a class="header-anchor" href="#ts中的高级类型" aria-hidden="true">#</a> Ts中的高级类型</h3><p>常见的高级类型有如下：</p><ul><li>交叉类型 <code>&amp;</code></li><li>联合类型 <code>｜</code></li><li>类型别名 <code>type</code></li><li>类型索引 <code>keyof</code></li><li>类型约束 <code>extends</code></li><li>映射类型 <code>in</code></li><li>条件类型 <code>T extends U ? X : Y</code></li></ul><h3 id="类型守卫" tabindex="-1"><a class="header-anchor" href="#类型守卫" aria-hidden="true">#</a> 类型守卫</h3><p>这里就用到 <code>is</code> 关键字 一般会出现在联合类型(联合类型只能访问交集)的使用上，用于缩紧类型范围，可以理解为一种别样的类型判断</p><p>先说说什么是类型守卫，在开发中经常会出现对类型判断的情况，比如</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">function</span> <span class="token function">test</span><span class="token punctuation">(</span>input<span class="token operator">:</span> <span class="token builtin">string</span> <span class="token operator">|</span> <span class="token builtin">number</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> input <span class="token operator">==</span> <span class="token string">&#39;string&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 这里 input 的类型「收紧」为 string</span>
  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
    <span class="token comment">// 这里 input 的类型「收紧」为 number</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token comment">// 通过对类型的收紧，在块级作用域里让一个联合类型变成简单类型，这就可以理解为一个类型守卫，除了typeof外，我们还可以用instanceof, in, ===/!== 来判断</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>但这样写比较冗余，那我们把类型判断抽象成函数呢 ？第一思路如下</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">function</span> <span class="token function">isString</span> <span class="token punctuation">(</span>input<span class="token operator">:</span> <span class="token builtin">any</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token keyword">typeof</span> input <span class="token operator">===</span> <span class="token string">&#39;string&#39;</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">function</span> <span class="token function">foo</span> <span class="token punctuation">(</span>input<span class="token operator">:</span> <span class="token builtin">string</span> <span class="token operator">|</span> <span class="token builtin">number</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isString</span><span class="token punctuation">(</span>input<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 这里 input 的类型没有「收紧」，仍为 string | number</span>
  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
    <span class="token comment">// 这里也一样</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>那要想达到类型守卫的效果，该怎么写呢？</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">function</span> <span class="token function">betterIsString</span> <span class="token punctuation">(</span>input<span class="token operator">:</span> <span class="token builtin">any</span><span class="token punctuation">)</span><span class="token operator">:</span> input <span class="token keyword">is</span> <span class="token builtin">string</span> <span class="token punctuation">{</span> <span class="token comment">// 返回类型改为了 \`input is string\`</span>
  <span class="token keyword">return</span> <span class="token keyword">typeof</span> input <span class="token operator">===</span> <span class="token string">&#39;string&#39;</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token comment">// 这样即可 input is string 理解为一个boolean类型，当他为true是就会再充当断言的作用把input视为string</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="infer关键字" tabindex="-1"><a class="header-anchor" href="#infer关键字" aria-hidden="true">#</a> infer关键字</h3><p><strong>infer 用于声明类型变量，以存储在模式匹配过程中所捕获的类型</strong></p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">type</span> <span class="token class-name">UnpackedArray<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span></span> <span class="token operator">=</span> <span class="token constant">T</span> <span class="token keyword">extends</span> <span class="token punctuation">(</span><span class="token keyword">infer</span> <span class="token constant">U</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">?</span> <span class="token constant">U</span> <span class="token operator">:</span> <span class="token constant">T</span>  
<span class="token keyword">type</span> <span class="token class-name">ReturnType<span class="token operator">&lt;</span><span class="token constant">T</span> <span class="token keyword">extends</span> <span class="token punctuation">(</span><span class="token operator">...</span>args<span class="token operator">:</span> <span class="token builtin">any</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span></span> <span class="token builtin">any</span><span class="token operator">&gt;</span> <span class="token operator">=</span> <span class="token constant">T</span> <span class="token keyword">extends</span> <span class="token punctuation">(</span><span class="token operator">...</span>args<span class="token operator">:</span> <span class="token builtin">any</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token keyword">infer</span> <span class="token constant">R</span> <span class="token operator">?</span> <span class="token constant">R</span> <span class="token operator">:</span> <span class="token builtin">any</span><span class="token punctuation">;</span>
<span class="token keyword">type</span> <span class="token class-name">Parameters<span class="token operator">&lt;</span><span class="token constant">T</span> <span class="token keyword">extends</span> <span class="token punctuation">(</span><span class="token operator">...</span>args<span class="token operator">:</span> <span class="token builtin">any</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span></span> <span class="token builtin">any</span><span class="token operator">&gt;</span> <span class="token operator">=</span> <span class="token constant">T</span> <span class="token keyword">extends</span> <span class="token punctuation">(</span><span class="token operator">...</span>args<span class="token operator">:</span> <span class="token keyword">infer</span> <span class="token constant">P</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token builtin">any</span> <span class="token operator">?</span> <span class="token constant">P</span> <span class="token operator">:</span> <span class="token builtin">never</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>需要注意的是，infer 只能在条件类型的 extends 子句中使用，同时 infer 声明的类型变量只在条件类型的 true 分支中可用。</strong></p><h3 id="const-和-readonly" tabindex="-1"><a class="header-anchor" href="#const-和-readonly" aria-hidden="true">#</a> const 和 readOnly</h3><p>const声明一个常量变量 且必须被初始化 在运行中检查</p><p>readonly 可以声明类/interface/type中一个属性 且不用被初始化 在编译时检查</p><h4 id="枚举和常量枚举" tabindex="-1"><a class="header-anchor" href="#枚举和常量枚举" aria-hidden="true">#</a> 枚举和常量枚举</h4><p>（1）枚举会被编译时会编译成一个对象，可以被当作对象使用</p><p>（2）<strong><code>const</code> 枚举会在 typescript 编译期间被删除，<code>const</code> 枚举成员在使用的地方会被内联进来，避免额外的性能开销</strong></p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token comment">// 枚举</span>
<span class="token keyword">enum</span> Color <span class="token punctuation">{</span>
  Red<span class="token punctuation">,</span>
  Green<span class="token punctuation">,</span>
  Blue
<span class="token punctuation">}</span>
<span class="token keyword">var</span> sisterAn <span class="token operator">=</span> Color<span class="token punctuation">.</span>Red
<span class="token comment">// 会被编译成 JavaScript 中的 var sisterAn = Color.Red</span>
<span class="token comment">// 即在运行执行时，它将会查找变量 Color 和 Color.Red</span>
<span class="token comment">// 常量枚举</span>
<span class="token keyword">const</span> <span class="token keyword">enum</span> Color <span class="token punctuation">{</span>
  Red<span class="token punctuation">,</span>
  Green<span class="token punctuation">,</span>
  Blue
<span class="token punctuation">}</span>
<span class="token keyword">var</span> sisterAn <span class="token operator">=</span> Color<span class="token punctuation">.</span>Red
<span class="token comment">// 会被编译成 JavaScript 中的 var sisterAn = 0</span>
<span class="token comment">// 在运行时已经没有 Color 变量</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="命名空间" tabindex="-1"><a class="header-anchor" href="#命名空间" aria-hidden="true">#</a> 命名空间</h3><p><strong>Ts中如果一个文件不带有顶级的<code>import</code>或者<code>export</code>声明，那么它的内容被视为全局可见的，相反，如果带有则会被认为是一个模块</strong></p><p>命名空间<code>namespace</code> 命名空间一个最明确的目的就是解决重名问题</p><p>命名空间定义了标识符的可见范围，一个标识符可在多个名字空间中定义，它在不同名字空间中的含义是互不相干的</p><ul><li>命名空间是位于全局命名空间下的一个普通的带有名字的 JavaScript 对象，使用起来十分容易。但就像其它的全局命名空间污染一样，它很难去识别组件之间的依赖关系，尤其是在大型的应用中</li></ul><p>⚠️ : <code>declare </code>关键字可全局声明类型</p><p><code>declare</code> 是用来定义全局变量、全局函数、全局命名空间、js modules、class等 <code>declare global</code> 为全局对象 <code>window</code> 增加新的属性</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">declare</span> global <span class="token punctuation">{</span> 
   <span class="token keyword">interface</span> <span class="token class-name">Window</span> <span class="token punctuation">{</span> 
        csrf<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span> 
   <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="typescript-中-、-、-、-、-、-等符号的含义" tabindex="-1"><a class="header-anchor" href="#typescript-中-、-、-、-、-、-等符号的含义" aria-hidden="true">#</a> <em><em>TypeScript 中 ?.、??、!、!.、_、*</em> 等符号的含义？</em>*</h3><blockquote><p><code>?. 可选链</code> 遇到 null 和 undefined 可以立即停止表达式的运行。 <code>?? 空值合并运算符</code> 当左侧操作数为 null 或 undefined 时，其返回右侧的操作数，否则返回左侧的操作数。 <code>! 非空断言运算符</code> x! 将从 x 值域中排除 null 和 undefined <code>!. </code> 在变量名后添加，可以断言排除undefined和null类型 <code>_ 数字分割符</code> 分隔符不会改变数值字面量的值，使人更容易读懂数字 .e.g 1_101_324。 <code>** </code>求幂</p></blockquote><h3 id="对-typescript-类中成员的-public、private、protected、readonly-修饰符的理解" tabindex="-1"><a class="header-anchor" href="#对-typescript-类中成员的-public、private、protected、readonly-修饰符的理解" aria-hidden="true">#</a> <strong>对 TypeScript 类中成员的 public、private、protected、readonly 修饰符的理解？</strong></h3><blockquote><p><code>public</code>: 成员都默认为<code>public</code>，被此限定符修饰的成员是可以被外部访问； <code>private</code>: 被此限定符修饰的成员是只可以被类的内部访问； <code>protected</code>: 被此限定符修饰的成员是只可以被类的内部以及类的子类访问; <code>readonly</code>: 关键字将属性设置为只读的。 只读属性必须在声明时或构造函数里被初始化。</p></blockquote><h3 id="react中使用ts" tabindex="-1"><a class="header-anchor" href="#react中使用ts" aria-hidden="true">#</a> React中使用ts</h3>`,43),d={href:"https://lruler.github.io/2021/12/05/react%E4%B8%AD%E7%9A%84%E5%86%85%E7%BD%AEts%E7%B1%BB%E5%9E%8B/#more",target:"_blank",rel:"noopener noreferrer"},v=s(`<h3 id="在-typescript-中如何实现类型标记-pick-与-omit" tabindex="-1"><a class="header-anchor" href="#在-typescript-中如何实现类型标记-pick-与-omit" aria-hidden="true">#</a> 在 Typescript 中如何实现类型标记 Pick 与 Omit</h3><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">interface</span> <span class="token class-name">User</span> <span class="token punctuation">{</span>
  id<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span>
  age<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span>
  name<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">// 相当于: type PickUser = { age: number; name: string; }</span>
<span class="token keyword">type</span> <span class="token class-name">OmitUser</span> <span class="token operator">=</span> Omit<span class="token operator">&lt;</span>User<span class="token punctuation">,</span> <span class="token string">&quot;id&quot;</span><span class="token operator">&gt;</span><span class="token punctuation">;</span>

<span class="token comment">// 相当于: type PickUser = { id: number; age: number; }</span>
<span class="token comment">// 从泛型 T 中检出指定的属性并组成一个新的对象类型</span>


<span class="token keyword">type</span> <span class="token class-name">PickUser</span> <span class="token operator">=</span> Pick<span class="token operator">&lt;</span>User<span class="token punctuation">,</span> <span class="token string">&quot;id&quot;</span> <span class="token operator">|</span> <span class="token string">&quot;age&quot;</span><span class="token operator">&gt;</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">type</span> <span class="token class-name">Pick<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token punctuation">,</span> <span class="token constant">K</span> <span class="token keyword">extends</span> <span class="token keyword">keyof</span> <span class="token constant">T</span><span class="token operator">&gt;</span></span> <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token punctuation">[</span><span class="token constant">P</span> <span class="token keyword">in</span> <span class="token constant">K</span><span class="token punctuation">]</span><span class="token operator">:</span> <span class="token constant">T</span><span class="token punctuation">[</span><span class="token constant">P</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token keyword">type</span> <span class="token class-name">Exclude<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token punctuation">,</span> <span class="token constant">U</span><span class="token operator">&gt;</span></span> <span class="token operator">=</span> <span class="token constant">T</span> <span class="token keyword">extends</span> <span class="token class-name"><span class="token constant">U</span></span> <span class="token operator">?</span> <span class="token builtin">never</span> <span class="token operator">:</span> <span class="token constant">T</span><span class="token punctuation">;</span>

<span class="token keyword">type</span> <span class="token class-name">Omit<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token punctuation">,</span> <span class="token constant">K</span> <span class="token keyword">extends</span> <span class="token keyword">keyof</span> <span class="token builtin">any</span><span class="token operator">&gt;</span></span> <span class="token operator">=</span> Pick<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token punctuation">,</span> Exclude<span class="token operator">&lt;</span><span class="token keyword">keyof</span> <span class="token constant">T</span><span class="token punctuation">,</span> <span class="token constant">K</span><span class="token operator">&gt;&gt;</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="ts手动实现工具类型" tabindex="-1"><a class="header-anchor" href="#ts手动实现工具类型" aria-hidden="true">#</a> Ts手动实现工具类型</h3><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token comment">// 将泛型 T 中的所有属性转化为可选属性</span>
<span class="token keyword">type</span> <span class="token class-name">Partial<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span></span> <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token punctuation">[</span><span class="token constant">P</span> <span class="token keyword">in</span> <span class="token keyword">keyof</span> <span class="token constant">T</span><span class="token punctuation">]</span><span class="token operator">?</span><span class="token operator">:</span> <span class="token constant">T</span><span class="token punctuation">[</span><span class="token constant">P</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token comment">// 将泛型 T 中的所有属性转化为必选属性</span>
<span class="token keyword">type</span> <span class="token class-name">Required<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span></span> <span class="token operator">=</span> <span class="token punctuation">{</span>
    <span class="token punctuation">[</span><span class="token constant">P</span> <span class="token keyword">in</span> <span class="token keyword">keyof</span> <span class="token constant">T</span><span class="token punctuation">]</span><span class="token operator">-</span><span class="token operator">?</span><span class="token operator">:</span> <span class="token constant">T</span><span class="token punctuation">[</span><span class="token constant">P</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token comment">// 将泛型 T 中的所有属性转化为只读属性</span>
<span class="token keyword">type</span> <span class="token class-name">Readonly<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span></span> <span class="token operator">=</span> <span class="token punctuation">{</span>
    <span class="token keyword">readonly</span> <span class="token punctuation">[</span><span class="token constant">P</span> <span class="token keyword">in</span> <span class="token keyword">keyof</span> <span class="token constant">T</span><span class="token punctuation">]</span><span class="token operator">:</span> <span class="token constant">T</span><span class="token punctuation">[</span><span class="token constant">P</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">// 从泛型 T 中检出指定的属性并组成一个新的对象类型</span>
<span class="token keyword">type</span> <span class="token class-name">Pick<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token punctuation">,</span> <span class="token constant">K</span> <span class="token keyword">extends</span> <span class="token keyword">keyof</span> <span class="token constant">T</span><span class="token operator">&gt;</span></span> <span class="token operator">=</span> <span class="token punctuation">{</span>
    <span class="token punctuation">[</span><span class="token constant">P</span> <span class="token keyword">in</span> <span class="token constant">K</span><span class="token punctuation">]</span><span class="token operator">:</span> <span class="token constant">T</span><span class="token punctuation">[</span><span class="token constant">P</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token comment">// Record 允许从 Union 类型中创建新类型，Union 类型中的值用作新类型的属性。</span>
<span class="token keyword">type</span> <span class="token class-name">Record<span class="token operator">&lt;</span><span class="token constant">K</span> <span class="token keyword">extends</span> <span class="token keyword">keyof</span> <span class="token builtin">any</span><span class="token punctuation">,</span> <span class="token constant">T</span><span class="token operator">&gt;</span></span> <span class="token operator">=</span> <span class="token punctuation">{</span>
    <span class="token punctuation">[</span><span class="token constant">P</span> <span class="token keyword">in</span> <span class="token constant">K</span><span class="token punctuation">]</span><span class="token operator">:</span> <span class="token constant">T</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token comment">// 从泛型 T 中排除可以赋值给泛型 U 的类型</span>
<span class="token keyword">type</span> <span class="token class-name">Exclude<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token punctuation">,</span> <span class="token constant">U</span><span class="token operator">&gt;</span></span> <span class="token operator">=</span> <span class="token constant">T</span> <span class="token keyword">extends</span> <span class="token class-name"><span class="token constant">U</span></span> <span class="token operator">?</span> <span class="token builtin">never</span> <span class="token operator">:</span> <span class="token constant">T</span><span class="token punctuation">;</span>

<span class="token comment">// 从泛型 T 中提取可以赋值给泛型 U 的类型</span>
<span class="token keyword">type</span> <span class="token class-name">Extract<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token punctuation">,</span> <span class="token constant">U</span><span class="token operator">&gt;</span></span> <span class="token operator">=</span> <span class="token constant">T</span> <span class="token keyword">extends</span> <span class="token class-name"><span class="token constant">U</span></span> <span class="token operator">?</span> <span class="token constant">T</span> <span class="token operator">:</span> <span class="token builtin">never</span><span class="token punctuation">;</span>

<span class="token comment">// 从泛型 T 中提取出不在泛型 K 中的属性类型，并组成一个新的对象类型</span>
<span class="token keyword">type</span> <span class="token class-name">Omit<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token punctuation">,</span> <span class="token constant">K</span> <span class="token keyword">extends</span> <span class="token keyword">keyof</span> <span class="token builtin">any</span><span class="token operator">&gt;</span></span> <span class="token operator">=</span> Pick<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token punctuation">,</span> Exclude<span class="token operator">&lt;</span><span class="token keyword">keyof</span> <span class="token constant">T</span><span class="token punctuation">,</span> <span class="token constant">K</span><span class="token operator">&gt;&gt;</span><span class="token punctuation">;</span>

<span class="token comment">// 从泛型 T 中排除掉 null 和 undefined</span>
<span class="token keyword">type</span> <span class="token class-name">NonNullable<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span></span> <span class="token operator">=</span> <span class="token constant">T</span> <span class="token keyword">extends</span> <span class="token class-name"><span class="token keyword">null</span></span> <span class="token operator">|</span> <span class="token keyword">undefined</span> <span class="token operator">?</span> <span class="token builtin">never</span> <span class="token operator">:</span> <span class="token constant">T</span><span class="token punctuation">;</span>

<span class="token comment">// 元组的方式获得函数的入参类型</span>
<span class="token keyword">type</span> <span class="token class-name">Parameters<span class="token operator">&lt;</span><span class="token constant">T</span> <span class="token keyword">extends</span> <span class="token punctuation">(</span><span class="token operator">...</span>args<span class="token operator">:</span> <span class="token builtin">any</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span></span> <span class="token builtin">any</span><span class="token operator">&gt;</span> <span class="token operator">=</span> <span class="token constant">T</span> <span class="token keyword">extends</span> <span class="token punctuation">(</span><span class="token operator">...</span>args<span class="token operator">:</span> <span class="token keyword">infer</span> <span class="token constant">P</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token builtin">any</span> <span class="token operator">?</span> <span class="token constant">P</span> <span class="token operator">:</span> <span class="token builtin">never</span><span class="token punctuation">;</span>

<span class="token comment">// 获得函数返回值的类型</span>
<span class="token keyword">type</span> <span class="token class-name">ReturnType<span class="token operator">&lt;</span><span class="token constant">T</span> <span class="token keyword">extends</span> <span class="token punctuation">(</span><span class="token operator">...</span>args<span class="token operator">:</span> <span class="token builtin">any</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span></span> <span class="token builtin">any</span><span class="token operator">&gt;</span> <span class="token operator">=</span> <span class="token constant">T</span> <span class="token keyword">extends</span> <span class="token punctuation">(</span><span class="token operator">...</span>args<span class="token operator">:</span> <span class="token builtin">any</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token keyword">infer</span> <span class="token constant">R</span> <span class="token operator">?</span> <span class="token constant">R</span> <span class="token operator">:</span> <span class="token builtin">any</span><span class="token punctuation">;</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,5),m={href:"https://blog.csdn.net/gtLBTNq9mr3/article/details/115499520",target:"_blank",rel:"noopener noreferrer"},b=s(`<p><strong>协变、逆变、双变和抗变的理解？</strong></p><blockquote><p><code>协变：X = Y </code>Y 类型可以赋值给 X 类型的情况就叫做协变，也可以说是 X 类型兼容 Y 类型</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">interface</span> <span class="token class-name"><span class="token constant">X</span></span> <span class="token punctuation">{</span> name<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span> age<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span> <span class="token punctuation">}</span> 
<span class="token keyword">interface</span> <span class="token class-name"><span class="token constant">Y</span></span> <span class="token punctuation">{</span> name<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span> age<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span> hobbies<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">}</span>
<span class="token keyword">let</span> x<span class="token operator">:</span> <span class="token constant">X</span> <span class="token operator">=</span> <span class="token punctuation">{</span> name<span class="token operator">:</span> <span class="token string">&#39;xiaoming&#39;</span><span class="token punctuation">,</span> age<span class="token operator">:</span> <span class="token number">16</span> <span class="token punctuation">}</span>
<span class="token keyword">let</span> y<span class="token operator">:</span> <span class="token constant">Y</span> <span class="token operator">=</span> <span class="token punctuation">{</span> name<span class="token operator">:</span> <span class="token string">&#39;xiaohong&#39;</span><span class="token punctuation">,</span> age<span class="token operator">:</span> <span class="token number">18</span><span class="token punctuation">,</span> hobbies<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&#39;eat&#39;</span><span class="token punctuation">]</span> <span class="token punctuation">}</span>
x <span class="token operator">=</span> y
复制代码
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>逆变：printY = printX</code> 函数X 类型可以赋值给函数Y 类型，因为函数Y 在调用的时候参数是按照Y类型进行约束的，但是用到的是函数X的X的属性和方法，ts检查结果是类型安全的。这种特性就叫做逆变，函数的参数有逆变的性质。</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">let</span> <span class="token function-variable function">printY</span><span class="token operator">:</span> <span class="token punctuation">(</span>y<span class="token operator">:</span> <span class="token constant">Y</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token keyword">void</span>
<span class="token function-variable function">printY</span> <span class="token operator">=</span> <span class="token punctuation">(</span>y<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span> <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>y<span class="token punctuation">.</span>hobbies<span class="token punctuation">)</span> <span class="token punctuation">}</span>
<span class="token keyword">let</span> <span class="token function-variable function">printX</span><span class="token operator">:</span> <span class="token punctuation">(</span>x<span class="token operator">:</span> <span class="token constant">X</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token keyword">void</span>
<span class="token function-variable function">printX</span> <span class="token operator">=</span> <span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span> <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>x<span class="token punctuation">.</span>name<span class="token punctuation">)</span> <span class="token punctuation">}</span>
printY <span class="token operator">=</span> printX
复制代码
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>双变（双向协变）：X = Y；Y = X</code>父类型可以赋值给子类型，子类型可以赋值给父类型，既逆变又协变，叫做“双向协变”（ts2.x 之前支持这种赋值，之后 ts 加了一个编译选项 strictFunctionTypes，设置为 true 就只支持函数参数的逆变，设置为 false 则支持双向协变） <code>抗变（不变）：</code>非父子类型之间不会发生型变，只要类型不一样就会报错</p></blockquote><h3 id="装饰器" tabindex="-1"><a class="header-anchor" href="#装饰器" aria-hidden="true">#</a> 装饰器</h3><p>https://juejin.cn/post/7006483808832716813</p><h3 id="函数重载" tabindex="-1"><a class="header-anchor" href="#函数重载" aria-hidden="true">#</a> 函数重载</h3><p>定义多个重载签名和一个实现签名，即类型和函数体，重载签名的类型不会合并，就是重载签名有number和string，但参数类型是number | string 会报错</p><h1 id="ts部分" tabindex="-1"><a class="header-anchor" href="#ts部分" aria-hidden="true">#</a> ts部分</h1><ul><li>基本类型</li><li>interface和type</li></ul><p>如何理解interface 和 type / 说说他们的相同点和不同点</p><ul><li><p>联合类型 交叉类型(这个类似于继承)</p></li><li><p>元组，枚举</p></li><li><p>泛型</p></li><li><p>类型断言</p></li><li><p>类型保护 typeof / instanceof / in / 类型谓词 xx is xx</p></li><li><p>字面量类型</p></li><li><p>keyof关键字</p></li><li><p>Readonly</p></li><li><p>索引签名， Ts对象的索引只能是string ,symbol, number(这个是为了数组和元组)</p></li><li><p>infer关键字</p></li></ul><p>表示在 <code>extends</code> 条件语句中待推断的类型变量。</p><p><code>type ParamType&lt;T&gt; = T extends (...args: infer P) =&gt; any ? P : T;</code></p><p>如果 <code>T</code> 能赋值给 <code>(...args: infer P) =&gt; any</code>，则结果是 <code>(...args: infer P) =&gt; any</code> 类型中的参数 <code>P</code>，否则返回为 <code>T</code></p>`,13);function y(g,h){const a=l("ExternalLinkIcon");return o(),c("div",null,[r,n("p",null,[n("a",k,[e("参考"),t(a)])]),u,n("p",null,[n("a",d,[e("参考"),t(a)])]),v,n("p",null,[n("a",m,[e("参考"),t(a)])]),b])}const w=p(i,[["render",y],["__file","ts-base.html.vue"]]);export{w as default};
