import{_ as n,p as s,q as a,Z as t}from"./framework-1749bed7.js";const p={},e=t(`<p>常见的设计模式包括但不限于以下几种：</p><ol><li>单例模式（Singleton Pattern）：确保一个类只有一个实例，并提供全局访问点。</li><li>工厂模式（Factory Pattern）：通过一个工厂类来创建对象，隐藏对象的创建细节。</li><li>观察者模式（Observer Pattern）：定义了一种一对多的依赖关系，当一个对象的状态发生改变时，其依赖者将收到通知。</li><li>适配器模式（Adapter Pattern）：将一个类的接口转换成客户端所期望的接口。</li><li>策略模式（Strategy Pattern）：定义一系列的算法，将它们封装起来，并使它们可以相互替换。</li><li>装饰者模式（Decorator Pattern）：动态地给对象添加额外的职责，是继承的一种替代方案。</li><li>MVC模式（Model-View-Controller Pattern）：将应用程序分为模型、视图和控制器三个部分，实现关注点分离。</li><li>迭代器模式（Iterator Pattern）：提供一种顺序访问聚合对象中各个元素的方法，而无需暴露其内部表示。</li></ol><h1 id="设计模式" tabindex="-1"><a class="header-anchor" href="#设计模式" aria-hidden="true">#</a> 设计模式</h1><p>就是优化嘛</p><blockquote><h4 id="🍅-我们写代码到底是在写什么" tabindex="-1"><a class="header-anchor" href="#🍅-我们写代码到底是在写什么" aria-hidden="true">#</a> 🍅 我们写代码到底是在写什么？</h4><p>我们写项目其实就是写模块然后设计它们之间的沟通，设计模式说白了就是帮助我们更好的设计模块， 更好的组织它们之间的沟通。</p><h4 id="🍅-设计模式扮演的角色" tabindex="-1"><a class="header-anchor" href="#🍅-设计模式扮演的角色" aria-hidden="true">#</a> 🍅 设计模式扮演的角色</h4><ul><li>帮助我们组织模块</li></ul><p>通过一些设计模式，组织模块间的组成结构</p><ul><li>帮助我们设计沟通</li></ul><p>有的设计模式可以帮助我们设计模块间如何沟通</p><ul><li>提高代码质量</li></ul><p>通过设计模式，让代码更加优雅</p><h4 id="🍅-设计原则" tabindex="-1"><a class="header-anchor" href="#🍅-设计原则" aria-hidden="true">#</a> 🍅 设计原则</h4><ol><li>开闭原则</li></ol><p>我们的程序要对扩展开放，对修改关闭；我们的程序要给具体使用的时候扩展的接口，但是在具体使用的时候不能让其修改我们的源码， 也就是说我们不用修改源码就能扩展功能，像 vue，react 等都有扩展的接口。</p><ol start="2"><li>单一职责原则</li></ol><p>我们的模块只做一件事情，模块的职责越单一越好。</p><ol start="3"><li>依赖倒置原则</li></ol><p>我们的上层模块不要依赖与具体的下层模块，应该依赖于抽象</p><ol start="4"><li>接口隔离原则</li></ol><p>我们的接口要细化，功能要单一，一个接口不要调用太多方法，使其能力单一，听起来像单一职责原则；但是 2 者的关注点不同， 单一职责原则主要关注于模块本身，接口隔离原则关注于接口；我们尽量细化接口，每个接口做的事情尽量单一化。</p><ol start="5"><li>迪米特法则</li></ol><p>我们让 2 个对象之间产生沟通，我们最好让 2 个对象之间知道的越少越好，没必要 2 者之间非常的了解；我们的中介者模式是一个很好体现迪米特法则的设计模式，中介者模式让 2 个对象之间没必要直接的沟通，如果直接沟通需要了解 2 者之间的 api 和彼此的调用方式，这个时候我们可以采用一个中介者来转达我们的需求，而不用彼此知道</p><ol start="6"><li>里氏替换原则</li></ol><p>它主要关注于继承，它的意义是任何使用父类的地方都可以用子类去替换，直白的说我们子类继承父类的时候，我们的子类必须完全保证继承父类的属性和方法，这样的话父类使用的地方，子类可以进行替换</p></blockquote><h3 id="设计模式的分类" tabindex="-1"><a class="header-anchor" href="#设计模式的分类" aria-hidden="true">#</a> 设计模式的分类</h3><h4 id="🍅-创建型" tabindex="-1"><a class="header-anchor" href="#🍅-创建型" aria-hidden="true">#</a> 🍅 创建型</h4><p>帮我们优雅的创建对象</p><ul><li>工厂模式-大量创建对象</li><li>单例模式-全局只能有我一个</li><li>建造者模式-精细化组合对象</li><li>原型模式-javaScript 的灵魂</li></ul><h4 id="🍅-结构型" tabindex="-1"><a class="header-anchor" href="#🍅-结构型" aria-hidden="true">#</a> 🍅 结构型</h4><p>帮我们优雅的设计代码结构</p><ul><li>外观模式-给你的一个套餐</li><li>适配器模式-用适配代替更改</li><li>装饰者模式-更优雅地扩展需求</li><li>享元模式-共享来减少数量</li><li>桥接模式-独立出来，然后再对接过去</li></ul><h4 id="🍅-行为型" tabindex="-1"><a class="header-anchor" href="#🍅-行为型" aria-hidden="true">#</a> 🍅 行为型</h4><p>模块之间的行为模式，帮助我们组织模块行为</p><ul><li>观察者模式-我作为第三方转发</li><li>状态模式-用状态代替判断</li><li>策略模式-算法工厂</li><li>职责链模式-像生产线一样组织模块</li><li>命令模式-用命令去解耦</li><li>迭代器模式-告别 for 循环</li></ul><h4 id="🍅-技巧模式" tabindex="-1"><a class="header-anchor" href="#🍅-技巧模式" aria-hidden="true">#</a> 🍅 技巧模式</h4><p>帮助我们优化代码技巧</p><ul><li>链模式-链式调用</li><li>委托模式-让别人代替你收快递</li><li>数据访问模式-一个方便的数据管理器</li><li>惰性模式-我要搞机器学习（第一次执行完后把状态记录下来）</li><li>等待者模式-等你们都回来再吃饭</li></ul><h2 id="_1-封装对象的设计模式" tabindex="-1"><a class="header-anchor" href="#_1-封装对象的设计模式" aria-hidden="true">#</a> 1. 封装对象的设计模式</h2><h4 id="工厂模式" tabindex="-1"><a class="header-anchor" href="#工厂模式" aria-hidden="true">#</a> 工厂模式</h4><p>方便大量创建对象，看名字就能看出来嘛。直接看例子，这个用的还是比较多的，其实我们平常封装的可复用组件，都可以理解为是工厂模式，最常见的就比如说Message提示框。我们通过调用Message的方法，传递不同的参数来得到不同类型的Message提示</p><div class="language-react line-numbers-mode" data-ext="react"><pre class="language-react"><code>const Message = (type, text) =&gt; {
  switch(type) {
    case &#39;success&#39;: return Message.success(text)
    case &#39;error&#39;: return Message.error(text)
  }
}
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="建造者模式" tabindex="-1"><a class="header-anchor" href="#建造者模式" aria-hidden="true">#</a> 建造者模式</h4><p>这个我用的就比较少了，意思是假如我们有一个很复杂的类，比如说一个md编辑器，我们要先把他的模块功能都剥开成一个个单独的类，然后再合并成md编辑器这么一个大类。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 假设我们要new一个md编辑器对象出来，需要配置语法解析，代码块高亮，字体样式等等100多个参数，不用建造者模式的情况下或许会这样写</span>
<span class="token keyword">new</span> <span class="token class-name">MdEditor</span><span class="token punctuation">(</span><span class="token string">&#39;dom&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;bule&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;big&#39;</span><span class="token punctuation">,</span> <span class="token operator">...</span>args<span class="token punctuation">)</span> 

<span class="token comment">// 有了建造者模式，先拆分模块</span>

<span class="token comment">// DOM解析</span>
<span class="token keyword">function</span> <span class="token function">DOMPrase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span>
<span class="token comment">// 代码高亮</span>
<span class="token keyword">function</span> <span class="token function">CodeHighLight</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span>
<span class="token comment">// 字体样式</span>
<span class="token keyword">function</span> <span class="token function">FontStyle</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span>
<span class="token comment">// 建造mdEditor</span>
<span class="token keyword">function</span> <span class="token function">runMdEditor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
  <span class="token keyword">new</span> <span class="token class-name">DomPrase</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  <span class="token keyword">new</span> <span class="token class-name">CodeHighLight</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  <span class="token keyword">new</span> <span class="token class-name">FontStyle</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
<span class="token comment">// 就是一步步来，一个个小的模块慢慢积累，最后建造出完整的所需的对象，并且建造步骤可以更换</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="单例模式" tabindex="-1"><a class="header-anchor" href="#单例模式" aria-hidden="true">#</a> 单例模式</h4><p>简单理解就是全局的一个唯一对象，并且这个对象全局共享访问。</p><p>我们最常用的就是redux 中的 store</p><h2 id="_2-提高复用性的设计模式" tabindex="-1"><a class="header-anchor" href="#_2-提高复用性的设计模式" aria-hidden="true">#</a> 2. 提高复用性的设计模式</h2><h4 id="桥接模式" tabindex="-1"><a class="header-anchor" href="#桥接模式" aria-hidden="true">#</a> 桥接模式</h4><p>名字花里胡哨，其实我们也经常用，就是抽取公共逻辑复用代码。react里面的自定义hook就可以这么理解。假设我们有三个组件，每一个组件的state都需要存到localStorage里面，我们就封装一个 useLocalState()来使用，这就是所谓的“抽取重复的方法，桥接完成对象本该有的功能”</p><h4 id="享元模式" tabindex="-1"><a class="header-anchor" href="#享元模式" aria-hidden="true">#</a> 享元模式</h4><p>简单来说就是 “享有共同的部分”，举个弹窗的例子，假设我要有100个弹窗，每个弹窗只有内容不一样，那我难道要new 一百个弹窗实例出来？这显然不够优雅是吧，所以我们其实只需要调用100次关于弹窗内容的方法就可以了，一下子从new 一百个对象，变成了一个对象，只不过调用了一百次一个局部方法而已。</p><h4 id="模版模式" tabindex="-1"><a class="header-anchor" href="#模版模式" aria-hidden="true">#</a> 模版模式</h4><p>这个可以往大了理解，就是插件实现的基础，比如浏览器理解为一个大的模版，他只实现了一些基础功能，他还有很多其他可发展的功能，只是有一个预留槽，不同的插件注入进去就会实现不同的效果。 Array.map()这种就可以理解为一个模版模式的发展行为</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">baseNav</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// 基础类，此处定下基本骨架</span>
<span class="token punctuation">}</span>

baseNav<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">action</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">fn</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// 特异性的处理，留一个回调等待具体实现</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_3-提高可扩展性" tabindex="-1"><a class="header-anchor" href="#_3-提高可扩展性" aria-hidden="true">#</a> 3. 提高可扩展性</h2><h4 id="适配器模式" tabindex="-1"><a class="header-anchor" href="#适配器模式" aria-hidden="true">#</a> 适配器模式</h4><p>就是将一个类的老接口再封装，适配新需求</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">class</span> <span class="token class-name">Plug</span> <span class="token punctuation">{</span>
  <span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token string">&#39;iphone充电头&#39;</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">class</span> <span class="token class-name">Target</span> <span class="token punctuation">{</span>
  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>plug <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Plug</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>plug<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">&#39; 适配器Type-c充电头&#39;</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">let</span> target <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Target</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
target<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// iphone充电头 适配器转Type-c充电头</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="装饰器模式" tabindex="-1"><a class="header-anchor" href="#装饰器模式" aria-hidden="true">#</a> 装饰器模式</h4><p>去看看Js ES7的装饰器语法就能理解了 就是我在我的a()方法里面调用b()方法，就可以做到在不修改b的情况下扩展了b方法</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>@testable
<span class="token keyword">class</span> <span class="token class-name">MyTestableClass</span> <span class="token punctuation">{</span>
  <span class="token comment">// ...</span>
<span class="token punctuation">}</span>

<span class="token keyword">function</span> <span class="token function">testable</span><span class="token punctuation">(</span><span class="token parameter">target</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  target<span class="token punctuation">.</span>isTestable <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

MyTestableClass<span class="token punctuation">.</span>isTestable <span class="token comment">// true</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="代理模式" tabindex="-1"><a class="header-anchor" href="#代理模式" aria-hidden="true">#</a> 代理模式</h4><p>详情可见ES6的Proxy</p><h4 id="命令者模式" tabindex="-1"><a class="header-anchor" href="#命令者模式" aria-hidden="true">#</a> 命令者模式</h4><p>这个不太懂，说是把一次API调用的过程解藕成 发布者，命令对象，接受者的模式，有点类似中介吧，没用过也没具体例子</p><h2 id="_4-提高代码的核心可扩展性" tabindex="-1"><a class="header-anchor" href="#_4-提高代码的核心可扩展性" aria-hidden="true">#</a> 4. 提高代码的核心可扩展性</h2><p>之前的只是提高某个类或者某个方法的可扩展性，比较微观，现在说的是宏观的提高。</p><h4 id="观察者模式" tabindex="-1"><a class="header-anchor" href="#观察者模式" aria-hidden="true">#</a> 观察者模式</h4><p>DOM的事件绑定就是典型的观察者模式，DOM监听点击事件，事件触发后调用他的callback</p><blockquote><p>定义了一种一对多的关系，让多个观察者对象同时监听某一个主题对象，这个主题对象的状态发生变化时就会通知所有的观察者对象，使它们能够自动更新自己，当一个对象的改变需要同时改变其它对象，并且它不知道具体有多少对象需要改变的时候，就应该考虑使用观察者模式。</p></blockquote><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 主题 保存状态，状态变化之后触发所有观察者对象</span>
<span class="token keyword">class</span> <span class="token class-name">Subject</span> <span class="token punctuation">{</span>
  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>state <span class="token operator">=</span> <span class="token number">0</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>observers <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
  <span class="token punctuation">}</span>
  <span class="token function">getState</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>state
  <span class="token punctuation">}</span>
  <span class="token function">setState</span><span class="token punctuation">(</span><span class="token parameter">state</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>state <span class="token operator">=</span> state
    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">notifyAllObservers</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
  <span class="token function">notifyAllObservers</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>observers<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token parameter">observer</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
      observer<span class="token punctuation">.</span><span class="token function">update</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
  <span class="token function">attach</span><span class="token punctuation">(</span><span class="token parameter">observer</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>observers<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>observer<span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token comment">// 观察者</span>
<span class="token keyword">class</span> <span class="token class-name">Observer</span> <span class="token punctuation">{</span>
  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token parameter">name<span class="token punctuation">,</span> subject</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name
    <span class="token keyword">this</span><span class="token punctuation">.</span>subject <span class="token operator">=</span> subject
    <span class="token keyword">this</span><span class="token punctuation">.</span>subject<span class="token punctuation">.</span><span class="token function">attach</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
  <span class="token function">update</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> update, state: </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span><span class="token keyword">this</span><span class="token punctuation">.</span>subject<span class="token punctuation">.</span><span class="token function">getState</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token comment">// 测试</span>
<span class="token keyword">let</span> s <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Subject</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token keyword">let</span> o1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Observer</span><span class="token punctuation">(</span><span class="token string">&#39;o1&#39;</span><span class="token punctuation">,</span> s<span class="token punctuation">)</span>
<span class="token keyword">let</span> o2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Observer</span><span class="token punctuation">(</span><span class="token string">&#39;02&#39;</span><span class="token punctuation">,</span> s<span class="token punctuation">)</span>

s<span class="token punctuation">.</span><span class="token function">setState</span><span class="token punctuation">(</span><span class="token number">12</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="职责链模式" tabindex="-1"><a class="header-anchor" href="#职责链模式" aria-hidden="true">#</a> 职责链模式</h4><p>把要做的事拆分成模块，模块之间只做自己模块的事</p><p>具体例子就是koa的洋葱圈模型了，后端常见的中间件的使用就是基于这个职责链的</p><h4 id="访问者模式" tabindex="-1"><a class="header-anchor" href="#访问者模式" aria-hidden="true">#</a> 访问者模式</h4><p>一个数据对象，不同场景有不同的数据操作方式，新的方法不应该定义在对象本身，而是new 一个访问者对象出来，把对数据对象的操作方法定义在访问者上。</p><p>比如有一个财务系统，我以老板的身份访问，我只关心盈利，并且可以决定支出。 而我以会计的身份访问，只关心收入和支出，但没有对财务的分配权。</p><h2 id="_5-提高代码质量" tabindex="-1"><a class="header-anchor" href="#_5-提高代码质量" aria-hidden="true">#</a> 5. 提高代码质量</h2><h3 id="优化代码结构的设计模式" tabindex="-1"><a class="header-anchor" href="#优化代码结构的设计模式" aria-hidden="true">#</a> 优化代码结构的设计模式</h3><h4 id="策略模式-状态模式-优化-if-else逻辑" tabindex="-1"><a class="header-anchor" href="#策略模式-状态模式-优化-if-else逻辑" aria-hidden="true">#</a> 策略模式/ 状态模式 （优化 if-else逻辑）</h4><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 没有用策略的模式的情况</span>
<span class="token keyword">function</span> <span class="token function">showPart1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
<span class="token keyword">function</span> <span class="token function">showPart2</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
<span class="token keyword">function</span> <span class="token function">showPart3</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
axios<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&#39;xxx&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">res</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>res <span class="token operator">==</span> <span class="token string">&#39;boss&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">showPart1</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token function">showPart2</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token function">showPart3</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>res <span class="token operator">==</span> <span class="token string">&#39;manner&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">showPart1</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token function">showPart2</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>res <span class="token operator">==</span> <span class="token string">&#39;staff&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">showPart3</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>

<span class="token comment">// 用策略模式的情况</span>
<span class="token keyword">function</span> <span class="token function">showControl</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">this</span><span class="token punctuation">.</span>status <span class="token operator">=</span> <span class="token string">&#39;&#39;</span>
  <span class="token keyword">this</span><span class="token punctuation">.</span>power <span class="token operator">=</span> <span class="token punctuation">{</span>
    <span class="token function-variable function">boss</span><span class="token operator">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token function">showPart1</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
      <span class="token function">showPart2</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
      <span class="token function">showPart3</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token function-variable function">manner</span><span class="token operator">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token function">showPart1</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
      <span class="token function">showPart2</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token function-variable function">staff</span><span class="token operator">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token function">showPart3</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
showControl<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">show</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">var</span> self <span class="token operator">=</span> <span class="token keyword">this</span>
  axios<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&#39;xxx&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">res</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    self<span class="token punctuation">.</span>status <span class="token operator">=</span> res
    self<span class="token punctuation">.</span>power<span class="token punctuation">[</span>self<span class="token punctuation">.</span>status<span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
<span class="token keyword">new</span> <span class="token class-name">showControl</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>状态模式 就是有 状态的 策略模式</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">moveLeft</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;left&#39;</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
<span class="token keyword">function</span> <span class="token function">moveRight</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;RigmoveRight&#39;</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
<span class="token keyword">function</span> <span class="token function">moveTop</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;Top&#39;</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
<span class="token keyword">function</span> <span class="token function">moveBottom</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;bomoveBottom&#39;</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token comment">// 没有用状态模式的情况</span>
<span class="token keyword">function</span> <span class="token function">mover</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>arguments<span class="token punctuation">.</span>length <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>arguments<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">&#39;left&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token function">moveLeft</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>arguments<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">&#39;right&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token function">moveRight</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>arguments<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">&#39;top&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token function">moveTop</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>arguments<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">&#39;bottom&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token function">moveBottom</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>arguments<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">&#39;left&#39;</span> <span class="token operator">&amp;&amp;</span> arguments<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">&#39;top&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token function">moveLeft</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
      <span class="token function">moveTop</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>arguments<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">&#39;right&#39;</span> <span class="token operator">&amp;&amp;</span> arguments<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">&#39;bottom&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token function">moveRight</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
      <span class="token function">moveBottom</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token comment">// 用状态模式的情况</span>
<span class="token keyword">function</span> <span class="token function">mover</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">this</span><span class="token punctuation">.</span>status <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
  <span class="token keyword">this</span><span class="token punctuation">.</span>actionHandle <span class="token operator">=</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">left</span><span class="token operator">:</span> moveLeft<span class="token punctuation">,</span>
    <span class="token literal-property property">right</span><span class="token operator">:</span> moveRight<span class="token punctuation">,</span>
    <span class="token literal-property property">top</span><span class="token operator">:</span> moveTop<span class="token punctuation">,</span>
    <span class="token literal-property property">bottom</span><span class="token operator">:</span> moveBottom
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
mover<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">run</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">this</span><span class="token punctuation">.</span>status <span class="token operator">=</span> <span class="token class-name">Array</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>arguments<span class="token punctuation">)</span>
  <span class="token keyword">this</span><span class="token punctuation">.</span>status<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token parameter">action</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>actionHandle<span class="token punctuation">[</span>action<span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
<span class="token keyword">new</span> <span class="token class-name">mover</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token string">&#39;left&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;right&#39;</span><span class="token punctuation">)</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="外观模式-为多个复杂的子系统提供一致的接口" tabindex="-1"><a class="header-anchor" href="#外观模式-为多个复杂的子系统提供一致的接口" aria-hidden="true">#</a> 外观模式 (为多个复杂的子系统提供一致的接口)</h4><p>意思大概就是 当完成一个操作时，需要操作多个子系统，不如提供一个更高级的Face直接操作</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 浏览器兼容</span>
<span class="token keyword">let</span> <span class="token function-variable function">addMyEvent</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">el<span class="token punctuation">,</span> ev<span class="token punctuation">,</span> fn</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>el<span class="token punctuation">.</span>addEventListener<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        el<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span>ev<span class="token punctuation">,</span> fn<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>el<span class="token punctuation">.</span>attachEvent<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        el<span class="token punctuation">.</span><span class="token function">attachEvent</span><span class="token punctuation">(</span><span class="token string">&#39;on&#39;</span> <span class="token operator">+</span> ev<span class="token punctuation">,</span> fn<span class="token punctuation">)</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
        el<span class="token punctuation">[</span><span class="token string">&#39;on&#39;</span> <span class="token operator">+</span> ev<span class="token punctuation">]</span> <span class="token operator">=</span> fn
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span> 
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="优化代码操作的设计模式" tabindex="-1"><a class="header-anchor" href="#优化代码操作的设计模式" aria-hidden="true">#</a> 优化代码操作的设计模式</h3><h4 id="迭代器模式-不访问内部的情况下遍历数据" tabindex="-1"><a class="header-anchor" href="#迭代器模式-不访问内部的情况下遍历数据" aria-hidden="true">#</a> 迭代器模式 (不访问内部的情况下遍历数据)</h4><p>就是Js的Iteration, forEach方法也是个典型的迭代器方法</p><h4 id="备忘录模式-记录状态-方便回滚" tabindex="-1"><a class="header-anchor" href="#备忘录模式-记录状态-方便回滚" aria-hidden="true">#</a> 备忘录模式(记录状态 方便回滚)</h4><p>顾名思义，这个比较好理解，算法上面也有类似的memo优化(dp table)</p>`,73),o=[e];function c(i,l){return s(),a("div",null,o)}const r=n(p,[["render",c],["__file","designMode.html.vue"]]);export{r as default};
